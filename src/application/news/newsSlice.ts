import { createSlice, PayloadAction } from '@reduxjs/toolkit';
import { AppThunk, RootState } from '../../config';
import { NewsRepositoryImpl } from '../../data';
import { News, NewsUsecase, urlTitle } from '../../domain';

export interface NewsValue {
  [key: string]: News;
}

export interface NewsPayload {
  key: string;
  data: News;
}

export interface NewsState {
  done: boolean;
  indexSelected: number;
  value: NewsValue;
}

const initialState: NewsState = {
  done: true,
  indexSelected: -1,
  value: {},
};

export const newsSlice = createSlice({
  name: 'news',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    getNewsTodo: (state, action: PayloadAction<number>) => {
      state.indexSelected = action.payload;
      state.done = false;
    },
    getNewsFail: (state, action: PayloadAction<number>) => {
      if (action.payload) {
        alert(action.payload);
      }
      state.done = true;
    },
    getNewsDone: (state, action: PayloadAction<NewsPayload>) => {
      if (action.payload && action.payload.key && action.payload.data) {
        state.value[action.payload.key] = action.payload.data;
      }
      state.done = true;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: builder => {
    console.log('builder: ', builder);
  },
});

export const { getNewsTodo, getNewsFail, getNewsDone } = newsSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state.
export const selectNewsValue = (state: RootState) => state.news.value;
export const selectNewsDone = (state: RootState) => state.news.done;
export const selectNewsSelected = (state: RootState) =>
  state.news.indexSelected;

// We can also write thunks by hand, which may contain both sync and async logic.
/**
 * async action
 */
const repo = new NewsRepositoryImpl();
const service = new NewsUsecase(repo);

export const fetchNews =
  (indexSelected: number): AppThunk =>
  async dispatch => {
    try {
      console.log(`sectionIndex:`, indexSelected);
      dispatch(getNewsTodo(indexSelected));
      const key = urlTitle[indexSelected];
      const news = await service.getNews(indexSelected);
      console.log('thunk - fetchNews: ', news);
      dispatch(getNewsDone({ key: key, data: news }));
    } catch (error) {
      console.error('thunk - fetchNews: ', error);
      dispatch(getNewsFail(error));
    }
  };

export default newsSlice.reducer;
