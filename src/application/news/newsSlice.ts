import { createSlice, PayloadAction } from '@reduxjs/toolkit';
import { AppThunk, RootState } from '../../config';
import { NewsRepositoryImpl } from '../../data';
import { News, NewsUsecase, Rss } from '../../domain';

export interface NewsValue {
  [key: string]: News;
}

export interface NewsPayload {
  key: string;
  data: News;
}

export interface NewsState {
  done: boolean;
  err: Error | null;
  sources: [string] | null;
  rssPack: Rss[] | null;
  selected: string;
  value: NewsValue;
}

const initialState: NewsState = {
  done: true,
  err: null,
  sources: null,
  rssPack: null,
  selected: '',
  value: {},
};

export const newsSlice = createSlice({
  name: 'news',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    getSourcesTodo: state => {
      state.done = false;
      state.err = null;
    },
    getSourcesFail: (state, action: PayloadAction<Error>) => {
      state.err = action.payload;
      state.done = true;
    },
    getSourcesDone: (state, action: PayloadAction<[string]>) => {
      state.sources = action.payload;
      state.done = true;
      state.err = null;
    },
    getRssTodo: state => {
      state.done = false;
      state.err = null;
      state.selected = '';
      state.value = {};
    },
    getRssFail: (state, action: PayloadAction<Error>) => {
      // if (action.payload.message) {
      //   alert(action.payload.message);
      // }
      state.err = action.payload;
      state.done = true;
    },
    getRssDone: (state, action: PayloadAction<Rss[]>) => {
      state.rssPack = action.payload;
      state.done = true;
      state.err = null;
    },
    getNewsTodo: (state, action: PayloadAction<string>) => {
      state.selected = action.payload;
      state.done = false;
      state.err = null;
    },
    getNewsFail: (state, action: PayloadAction<Error>) => {
      // if (action.payload.message) {
      //   alert(action.payload.message);
      // }
      state.err = action.payload;
      state.done = true;
    },
    getNewsDone: (state, action: PayloadAction<NewsPayload>) => {
      if (action.payload && action.payload.key && action.payload.data) {
        state.value[action.payload.key] = action.payload.data;
      }
      state.done = true;
      state.err = null;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: builder => {
    console.log('builder: ', builder);
  },
});

export const {
  getSourcesTodo,
  getSourcesFail,
  getSourcesDone,
  getRssTodo,
  getRssFail,
  getRssDone,
  getNewsTodo,
  getNewsFail,
  getNewsDone,
} = newsSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state.
export const selectRssSources = (state: RootState) => state.news.sources;
export const selectRssPack = (state: RootState) => state.news.rssPack;
export const selectNewsValue = (state: RootState) => state.news.value;
export const selectNewsDone = (state: RootState) => state.news.done;
export const selectNewsErr = (state: RootState) => state.news.err;
export const selectNewsSelected = (state: RootState) => state.news.selected;

// We can also write thunks by hand, which may contain both sync and async logic.
/**
 * async action
 */
const repo = new NewsRepositoryImpl();
const service = new NewsUsecase(repo);

export const fetchSources = (): AppThunk => async dispatch => {
  try {
    dispatch(getSourcesTodo());
    const sources = await service.getSources();
    dispatch(getSourcesDone(sources));
  } catch (err) {
    dispatch(getSourcesFail(err));
  }
};

export const fetchRssPack =
  (source: string): AppThunk =>
  async dispatch => {
    try {
      dispatch(getRssTodo());
      // todo
      const rssPack: Rss[] = await service.getRssEditorChoice(source);
      console.log('thunk - fetchRssPack: ', rssPack);
      dispatch(getRssDone(rssPack));
    } catch (err) {
      console.error('thunk - fetchRssPack: ', err);
      dispatch(getRssFail(err));
    }
  };

export const fetchNews =
  (rss: Rss): AppThunk =>
  async dispatch => {
    try {
      console.log(`fetchNews selected :`, rss);
      dispatch(getNewsTodo(rss.url));
      const news = await service.getNews(rss.url);
      console.log('>>> thunk - fetchNews: ', news);
      dispatch(getNewsDone({ key: rss.url, data: news }));
    } catch (err) {
      console.error('thunk - fetchNews: ', err);
      dispatch(getNewsFail(err));
    }
  };

export default newsSlice.reducer;
